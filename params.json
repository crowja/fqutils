{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Fqutils","tagline":"Toolset for bioinformatics people working with files in FASTQ format.","google":"","body":"# FQUTILS\r\n\r\n**[Home page](http://crowja.github.com/fqutils)** | **[Downloads](https://github.com/crowja/fqutils/downloads)** | **[Issues](https://github.com/crowja/fqutils/issues)**\r\n\r\nFqutils is a collection of command line tools for working with files in FASTQ format, and\r\ncomplements the [Fastx Toolkit](http://hannonlab.cshl.edu/fastx_toolkit) developed by\r\nGreg Hannon's lab at Cold Spring Harbor. Fqutils is intended to be useful as part of\r\nthe early portions of postsequencing pipelines and quality assessment processes. At present\r\nthe package provides the following:\r\n\r\n<table>\r\n<tr><td>fqu_are_paired</td><td>Checks if two files are pairwise concordant.</td></tr>\r\n<tr><td>fqu_cat</td><td>Like Unix cat, but for files in FASTQ format. Assuming well-formed input the output is guaranteed to be in lazy-FASTQ (i.e., four line) records. Especially useful when your own parsers assume this simpler format.</td></tr>\r\n<tr><td>fqu_cull</td><td>Reports a subset of a FASTQ stream, based on a collection of identifiers.</td></tr>\r\n<tr><td>fqu_degen</td><td>Replaces A, C, G, T with degenerate codes. Options include conversion to purines and pyrimidines (A, G -> R and C, T -> Y) and to a GC representation (C, G -> S and A, T -> W).</td></tr>\r\n<tr><td>fqu_rselect</td><td>Randomly select a subset of records from FASTQ input.</td></tr>\r\n<tr><td>fqu_splitq</td><td>Segregate FASTQ input into two output files, based on a collection of identifiers.</td></tr>\r\n<tr><td>fqu_summary</td><td>Generate summary statistics for FASTQ input.\r\nThese include total record (sequence) count, maximum sequence size, a estimation\r\nof the quality offset (33 or 64), basecounts per position, a GC content histogram,\r\nand per position quartiles of the qualities.</td></tr>\r\n<tr><td>fqu_tidy</td><td>Write FASTQ output based on FASTQ input. Like fqu_cat, output is guaranteed to be in four line records. Provides a \"--squash\" option for reducing the size of each record, currently by ignoring the second header, and a \"--tab-delimited\" option if you happen to want the output stream in a four column format. These single line records can be particularly convenient for internal processing pipelines.</td></tr>\r\n<tr><td>fqu_wc</td><td>Generates word (kmer) counts for FASTQ input.</td></tr>\r\n</table>\r\n\r\n## DEPENDENCIES\r\n\r\nThe package is written in Standard C, and ought to be easily portable to all Unix-like\r\nsystems. If you find this isn't the case please let me know. Fqutils requires Jean-Loup\r\nGailly's and Mark Adler's [Zlib](http://www.zlib.net/) 1.2.4 or later, which in turn allows\r\nthe tools to work transparently with text FASTQ as well as gzip-compressed FASTQ. It also\r\nmakes use of Troy Hanson's convenient [uthash macro collection](http://uthash.sourceforge.net), which is included.\r\n\r\n## INSTALLATION\r\n\r\n    # Chdir into the source directory, then configure-make ...\r\n    $ ./configure --prefix=/path/to/install_dir\r\n    $ make\r\n    $ make check\r\n    $ make install\r\n\r\nThe \"make check\" step ought to run rather quickly since at present it doesn't do any\r\ntesting at all. If your Zlib installation is in a nonstandard location, provide guidance\r\nto the configure script using the standard environment variables; for instance:\r\n\r\n    $ LDFLAGS=-L/opt/zlib-1.2.4/lib ./configure --prefix=/path/to/install_dir\r\n\r\n## EXAMPLES\r\n\r\n    # fqu_tidy\r\n    $ cat foo.fq | fqu_tidy\r\n    $ gunzip -c foo.fq.gz | fqu_tidy\r\n    $ cat foo.fq.gz | fqu_tidy\r\n\r\nThe third example above demonstrates that gzipped FASTQ streams can be handled directly\r\nwithout explicit uncompression. \r\n\r\n    # fqu_summary\r\n    $ fqu_summary foo.fq.gz > foo.fqsum\r\n    $ cat foo.fq | fqu_summary > foo.fqsum\r\n\r\n    # fqu_splitq\r\n    $ cat foo.fq | fqu_splitq --out baz idfile1.txt idfile2.txt\r\n    $ cat foo.fq.gz | fqu_splitq --out baz idfile1.txt idfile2.txt\r\n\r\n## LICENSE\r\n\r\nSee the LICENSE file in the distribution. Fqutils is distributed under the zlib/libpng license.\r\n\r\nNote that Fqutils is provided by the copyright holders \"as is\" and without any express or implied\r\nwarranties, including, without limitation, the implied warranties of merchantibility and fitness\r\nfor a particular purpose.\r\n\r\n## COPYRIGHT\r\n\r\nCopyright 2012 by John A. Crow and the National Center for Genome Resources. All rights reserved.\r\n\r\n## BUGS\r\n\r\nIf you find what appears to be a bug, send me the smallest possible test set you\r\ncan pull together that demonstrates the problem.\r\n\r\n## CONTACT ME\r\n\r\nIf you find Fqutils useful, or have ideas for improvement, drop me a note or better yet open\r\nan issue at [the Fqutils GitHub page](https://github.com/crowja/fqutils).\r\n\r\nJohn A. Crow, <crowja@gmail.com>.\r\n\r\n\r\n"}